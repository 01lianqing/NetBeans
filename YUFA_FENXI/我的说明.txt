first和follow集合问题

1.首先有两个集合set<char>
终结符的 ending;
非终结符 between；
2.每个非终结符 和 两个集合first follow 集合有一一对应的映射关系
map<char,set<char>> first;
map<char,set<char>> follow;
3.关于求法
search_first()：不断迭代直到出现终结符或空时停止
从最下面开始考察第一个字符
如果是终结符
    --停止搜索，开始压入到first的集合里
如果是非终结符
    --递归考察这个字符的字符串中的首字符
    --如果已经知道该非终结符的first集合，直接加入到要求的first集合里
    --
searchFollow()：遍历语法，按规则添加，直到结束
    按三条规则遍历字符串：
    1，将#添加到开始符的follow集合里面
    2，把紧跟着非终结符的下个字符的first集合，加到当前的follow集合里
    3，把前面的非终结符的follow集合加到末尾非终结符的follow集合里，有前提的
    4，最后矫正，将集合里面的空串剔除掉

4.存储格式
i> 语法：由一个非终结符一一映射的一组字符串
   map<char,string a[]>
   for example:
	E -> E+T|T
	T -> T*F|F
	F -> i|(E)
   	 //是否能够保证从上到下让非终结符次迭代，最后一个不含迭代，
   	 // 那么就可以从下到上，找first集合，然后做合并，减少了迭代的次数
   	 // 左递归处理
	E ->TA
	A ->+TA|_
	T ->FB
	B ->*FB|_
	F ->(E)|i
	read()//读入语法并存入map，可以倒序存入
	这里当然可以借助数字来存储，就是下面已经建立的映射
string yuFa[5][2]={
	"TA",null,
	"+TA","_",
	"FB",null,
	"*FB","_",
	"(E)","i"
	};


2>
// 这里也可以写个初始化和函数
// 读入语法保证有大写英文为非终结符，其他计入终结符
const No_end no[] = {
    {'E', 0},
    {'A', 1}, //here using A as E'
    {'T', 2},
    {'B', 3}, //here using B as T'
    {'F', 4}
};

const End_char end[] = {
    {'i', 0},
    {'+', 1},
    {'*', 2},
    {'(', 3},
    {')', 4},
    {'#', 5}
};

// 这里我使用了set，实际上我这里是多余的，因为上面的结构体已经建立了
// 一样的映射，用了set反而不好赋初值了。。。所以这个我决定着劲set
// 用那个char -> number的程序find_number1()来完成映射
string yuFa[5][2]={
	"TA",null,
	"+TA","_",
	"FB",null,
	"*FB","_",
	"(E)","i"
	};

map<char,set<char>> first;
void search_first(map<char,set<char>> &first,No_end Nchar){
	set<char> setdemo;
	int i=Nchar.n;
	for(int j=0;j<2;j++){
		char ch = yuFa[i][j].at(0);
		if(is_ending_char(ch)){
			setdemo.insert(ch);
		}else{
			for(set<char>::iterator first[ch].begin();it!=first[ch].end();it++){
				setdemo.insert(*it);
			}
		}
	}
	first.insert(Nchar.ch,setdemo);
}

coding:

bool is_ending_char(char ch) {
    for (int i = 0; i < 6; i++) {
        if (ch == no[i].ch) {
            return false;
        }
    }
    return true;
}

int find_number1(char ch) {
    if (!is_ending_char(ch)) {
        for (int i = 0; i < MAX_NO; i++) {
            if (ch == no[i].ch) {
                return i;
            }
        }
    } else {
        for (int i = 0; i < 6; i++) {
            if (ch == end[i].ch) {
                return i;
            }
        }
    }
}
set<char> first[MAX_NO];
set<char> follow[MAX_NO];

void follow_set() {

}

bool has_null(char ch) {
    int i = find_number1(ch);
    bool ans = false;
    for (set<char>::iterator it = first[i].begin(); it != first[i].end(); it++) {
        if ((*it) == '_')
            ans = true;
    }
    return ans;
}

void search_second(set<char> follow[], No_end Nchar) {
    int n = Nchar.n;
    char ch = Nchar.ch;
    if (n == 0) {
        follow[0].insert('#');
    }
    for (int i = 0; i < MAX_NO; i++) {
        for (int j = 0; i < 2; j++) {
            string temp = yuFa[i][j];
            int size_s = temp.size();
            size_t num = temp.find(ch);
            if (num + 1 < size_s) {
                char ch1 = temp.at(num + 1);
                if (is_ending_char(ch1)) {
                    follow[n].insert(ch1);
                } else {
                    //把非终结的first集合加入到当前的set集合;
                    int i = find_number1(ch1);
                    for (set<char>::iterator it = first[i].begin(); it != first[i].end(); it++) {
                        follow[n].insert(*it);
                    }
                }
            }
            if ((num + 1) == size_s) {//恰好是最后的字符
                char ch1 = temp.at(num + 1);
                if (!is_ending_char(ch1)) {
                    //  把这个非终结符的来源字符的follow加入到当前的set集合;
                    int i = find_number1(ch1);
                    for (set<char>::iterator it = follow[i].begin(); it != follow[i].end(); it++) {
                        follow[n].insert(*it);
                    }
                }
            }
            char ch2 = temp.at(size_s - 1);
            if (!is_ending_char(ch2) && has_null(ch2)) {
                // 把这个非终结符的来源字符的follow加入到当前的set集合;
                int i = find_number1(ch2);
                for (set<char>::iterator it = follow[i].begin(); it != follow[i].end(); it++) {
                    follow[n].insert(*it);
                }
            }
        }
    }
    follow[n].erase('_'); //处理掉那个空的动作
}

void test_forfollow() {
     for (int i = 4; i >= 0; i--)
        search_follow(follow, no[i]);
//     暂且认为这里经历了两次的循环之后，可以到达所谓的follow集合不再变化
//     否则我应该在写一个判定follow集合不再放大，不再改变
    for (int i = 0; i < MAX_NO; i++) {
        for (set<char>::iterator it = follow[i].begin(); it != follow[i].end(); it++) {
            cout << (*it) << " ";
        }
        cout << endl;
    }
}

void search_first(set<char> first[], No_end Nchar) {
    set<char> setdemo;
    int i = Nchar.n;

    for (int j = 0; j < 2; j++) {
        if (yuFa[i][j] != "") {
            char ch = yuFa[i][j].at(0);
            if (is_ending_char(ch)) {
                setdemo.insert(ch);
            } else {
                int n = find_number1(ch);
                for (set<char>::iterator it = first[n].begin(); it != first[n].end(); it++) {
                    setdemo.insert(*it);
                }
            }
        }
    }
    for (set<char>::iterator it = setdemo.begin(); it != setdemo.end(); it++) {
        first[i].insert(*it);
    }
}

void test_first() {
    for (int i = 4; i >= 0; i--)
        search_first(first, no[i]);
    for (int i = 0; i < 5; i++) {
        for (set<char>::iterator it = first[i].begin(); it != first[i].end(); it++) {
            cout << (*it) << " ";
        }
        cout << endl;
    }
}


剩余的工作
1*就是建立follow和first两个集合与list之间的转化，这就完成所有的接口工作。

